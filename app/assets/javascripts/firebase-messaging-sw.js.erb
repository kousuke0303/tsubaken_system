var CACHE_VERSION = 'v1';
var CACHE_NAME = CACHE_VERSION + ':sw-cache-';

console.log('V9');

let requestCounter = 0;

<!--▼ set_badge ▼-->
function setBadge(...args) {
  if (navigator.setAppBadge) {
    navigator.setAppBadge(...args);
  } else if (navigator.setExperimentalAppBadge) {
    navigator.setExperimentalAppBadge(...args);
  } else if (window.ExperimentalBadge) {
    window.ExperimentalBadge.set(...args);
  }
};

function catchBadge(){
  var memberCode = localStorage.getItem('memberCode');
  $.ajax({
    type: 'GET',
    url: "/badge_count",
    data: {member_code: memberCode}
  });
};
<!--▲ set_badge ▲-->


function onInstall(event) {
  console.log('[Serviceworker]', "Installing!", event);
  self.skipWaiting();
  event.waitUntil(
    caches.open(CACHE_NAME).then(function prefill(cache) {
      return cache.addAll([

        <!--// make sure serviceworker.js is not required by application.js-->
        <!--// if you want to reference application.js from here-->
        '<%#= asset_path "application.js" %>',
        '<%= asset_path "application.css" %>',
        '/offline.html'
      ]);
    })
  );
}

function onActivate(event) {
  console.log('[Serviceworker]', "Activating!", event);
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames.filter(function(cacheName) {
          <!--// Return true if you want to remove this cache,-->
          <!--// but remember that caches are shared across-->
          <!--// the whole origin-->
          return cacheName.indexOf(CACHE_VERSION) !== 0;
        }).map(function(cacheName) {
          return caches.delete(cacheName);
        })
      );
    })
  );
}

<!--// Borrowed from https://github.com/TalAter/UpUp-->
function onFetch(event) {
  event.respondWith(
    <!--// try to return untouched request from network first-->
    fetch(event.request).catch(function() {
      <!--// if it fails, try to return request from the cache-->
      return caches.match(event.request).then(function(response) {
        if (response) {
          console.log(responce);
          return response;
        }
        if ('setAppBadge' in navigator) {
          navigator.setAppBadge(++requestCounter);
        }
        
        <!--// if not found in cache, return default offline content for navigate requests-->
        if (event.request.mode === 'navigate' ||
          (event.request.method === 'GET' && event.request.headers.get('accept').includes('text/html'))) {
          console.log('[Serviceworker]', "Fetching offline content", event);
          return caches.match('/offline.html');
        }
      })
    })
  );
}

self.addEventListener('install', onInstall);
self.addEventListener('activate', onActivate);
self.addEventListener('fetch', onFetch);

<!--fcm-->

importScripts('https://www.gstatic.com/firebasejs/8.6.8/firebase-app.js');
importScripts('https://www.gstatic.com/firebasejs/8.6.8/firebase-messaging.js');

var firebaseConfig = {
  apiKey: "AIzaSyAhVjjuRBAnlQUppvd5tkcmpGCyig5M8mo",
  authDomain: "emperor-paint-18f69.firebaseapp.com",
  projectId: "emperor-paint-18f69",
  storageBucket: "emperor-paint-18f69.appspot.com",
  messagingSenderId: "819397810288",
  appId: "1:819397810288:web:38e7e0fd1256cbbecbbcb5",
  measurementId: "G-3D5Z4MM02E"
};

firebase.initializeApp(firebaseConfig);
const messaging = firebase.messaging();

messaging.setBackgroundMessageHandler(function(payload) {
    const notificationTitle = payload.notification.title;
    const notificationOptions = {
        body: payload.notification.body,
        icon: "<%= image_path "/appicon/icon-72x72.png" %>",
    };
    return self.registration.showNotification(notificationTitle, notificationOptions);
});